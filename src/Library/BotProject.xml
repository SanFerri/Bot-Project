<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotProject</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Administrador">
            <summary>
            Clase Administrador del tipo IUsuario, posee, ademas de las property id, name e invitacion de toda clase 
            usuario, una property empresa que indica la empresa de la que participa el Empresario.
            </summary>
        </member>
        <member name="P:ClassLibrary.Administrador.State">
            <summary>
            El estado del comando.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Administrador.#ctor">
            <summary>
            Constructor de Administrador
            </summary>
        </member>
        <member name="P:ClassLibrary.Administrador.Id">
            <summary>
            Property id, es el encargado de conocer el numero entero del id del administrador.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Administrador.Invitacion">
            <summary>
            Property invitacion, es el encargado de conocer el numero entero de la invitacion del 
            administrador.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Administrador.#ctor(System.String)">
            <summary>
            Constructor de una instancia de administrador. 
            </summary>
            <param name="invitacion"></param>
        </member>
        <member name="M:ClassLibrary.Administrador.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Buscador">
            <summary>
            Buscador es el experto en conocer las busquedas.
            </summary>
        </member>
        <member name="F:ClassLibrary.Buscador.client">
            <summary>
            Variable estatica Buscar porque es una lista de instancia de publicación que lleva 
            el registro de todas las busquedas que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Buscador.Buscar(System.String,ClassLibrary.Ubicacion)">
            <summary>
            Property publicacion, es una lista de instancia publicación.
            Lleva el registro de las publicaciones.
            </summary>
            <param name="tipo"></param>
            <param name="ubicacion"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Buscador.ResiduosConstantes">
            <summary>
            Variable estatica ResiduosConstantes porque es una lista de instancia de string que lleva
            el registro de todos los residuos en publicacion cuya property constante devuelve true.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Buscador.ResiduosPuntuales">
            <summary>
            Variable estatica ResiduosPuntuales porque es una lista de instancia de string que lleva
            el registro de todos los residuos en publicacion cuya property constante devuelve false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Buscador.Buscar(System.String)">
            <summary>
            Variable estatica BuscarConPalabraClave porque es una lista de instancia de publicación que lleva 
            el registro de todas las busquedas que hay con la palabra clave otorgada como parametro.
            </summary>
            <param name="palabraclave"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Buscador.Buscar(ClassLibrary.IEmpresarioPublicaciones,System.Int32)">
            <summary>
            Es un metodo que te devuelve la lista de elementos entregados.
            </summary>
            <param name="publicaciones"></param>
            <param name="tiempo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Buscador.Buscar(System.Int32,System.Int32)">
            <summary>
            Metodo que te devuelve una lista de los residuos consumidos.
            </summary>
            <param name="id"></param>
            <param name="tiempo"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.DistanciaUbicacion">
            <summary>
            DistanciaUbicacion es una clase que conoce las distancias.
            </summary>
        </member>
        <member name="P:ClassLibrary.DistanciaUbicacion.LocationsDistance">
            <summary>
            Property LocationDistance, es la distancia que se ingresa.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.DistanciaUbicacion.#ctor">
            <summary>
            Constructor de una instancia de DistanciaUbicacion.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:ClassLibrary.DistanciaUbicacion.Distancia(ClassLibrary.Ubicacion,ClassLibrary.Ubicacion)">
            <summary>
            Constructor de una instancia de distancia.
            </summary>
            <param name="ubicacion1"></param>
            <param name="ubicacion2"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Emprendedor">
            <summary>
            Clase Emprendedor del tipo IUsuario, posee el nombre, invitacion e id del emprendedor.
            </summary>
        </member>
        <member name="P:ClassLibrary.Emprendedor.State">
            <summary>
            El estado del comando.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Emprendedor.#ctor">
            <summary>
            Constructor de Emprendedor.
            </summary>
        </member>
        <member name="P:ClassLibrary.Emprendedor.Id">
            <summary>
            Property id, es el id que se le asigna al emprededor para poder reconocerlo como tal.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Emprendedor.#ctor(System.Int32)">
            <summary>
            Constructor de una instancia de Emprendedor. 
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Emprendedor.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Empresa">
            <summary>
            Empresa es una clase que conoce la información de las empresas, el nombre, la ubicación, el
            contacto, los residuos, sus publicaciones y a el empresario.
            </summary>
        </member>
        <member name="M:ClassLibrary.Empresa.#ctor">
            <summary>
            Constructor de Empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresa.Nombre">
            <summary>
            Property nombre, es el nombre que tiene la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Empresa.Ubicacion">
            <summary>
            Property ubicacion, es la ubicación donde se encuentra la empresa. 
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Empresa.Contacto">
            <summary>
            Property contacto, es el contacto de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Empresa.Residuos">
            <summary>
            Es la lista de residuos que lleva el registro de todos los residuos que tiene la empresa 
            publicados.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.Empresa.Publicaciones">
            <summary>
            Es la lista que lleva el registro de todas las publicaciones que tiene la empresa
            realizadas. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.Empresa.Empresario">
            <summary>
            Property empresario, es el encargado de la empresa. 
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Empresa.#ctor(System.String,ClassLibrary.Ubicacion,System.String)">
            <summary>
            Constructor de una instancia de Empresa.
            </summary>
            <param name="nombre"></param>
            <param name="ubicacion"></param>
            <param name="contacto"></param>
        </member>
        <member name="M:ClassLibrary.Empresa.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Empresario">
            <summary>
            Clase Empresario del tipo IUsuario, posee, ademas de las property id e invitacion de toda clase 
            usuario, una property empresa que indica la empresa de la que participa el Empresario.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresario.State">
            <summary>
            El estado del comando.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Empresario.#ctor">
            <summary>
            Constructor de Empresario.
            </summary>
        </member>
        <member name="P:ClassLibrary.Empresario.Empresa">
            <summary>
            Es el encargado de conocer la empresa de la que es parte.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Empresario.Id">
            <summary>
            Es el encargado de conocer el id del empresario.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Empresario.LasPublicaciones">
            <summary>
            Lista donde se almacenan las publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Empresario.Invitacion">
            <summary>
            Es el encargado de conocer el valor de una invitación de acceso.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Empresario.#ctor(System.String,ClassLibrary.Empresa)">
            <summary>
            Constructor de una instancia de Empresario.
            </summary>
            <param name="invitacion"></param>
            <param name="empresa"></param>
        </member>
        <member name="M:ClassLibrary.Empresario.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AgregarResiduoHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "AgregarResiduo".
            </summary>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.EmpresaUsuario">
            <summary>
            Es el usuario de la empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.NombreResiduo">
            <summary>
            Es el nombre del residuo publicado.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.VolumenResiduo">
            <summary>
            La cantidad del residuo que hay.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.UnidadResiduo">
            <summary>
            Es la unidad con la cual se mide el residuo, por ejemplo (kg, toneladas, etc.)
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.CostoResiduo">
            <summary>
            Es el costo monetario del residuo.
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.LosEmpresarios">
            <summary>
            Lista de todos los empresarios que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.Empresario">
            <summary>
            Son los empresarios que estan usando los handlers.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AgregarResiduoHandler.MonedaResiduo">
            <summary>
            Es la moneda con la cual se va a cobrar el residuo, por ejemplo (pesos uruguayos, dolares, etc.)
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.AgregarResiduoHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Esta clase procesa el mensaje /agregarresiduo. 
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AgregarResiduoHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.AgregarResiduoHandler.InternalCancel">
            <summary>
            Resetea el estado del handler.
            </summary>
        </member>
        <member name="T:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState">
            <summary>
             Indica los diferentes estados que puede tener el comando AgregarResiduoState.
            </summary>
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState.Start">
            -Start: Es el estado inicial del comando.
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState.NombrePrompt">
            -NombrePrompt: Es el estado donde se pide el nombre del tipo de residuo. 
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState.CantidadPrompt">
            -CantidadPrompt: Es el estado donde se pide la cantidad del tipo de residuo.
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState.UnidadPrompt">
            -UnidadPrompt: Es el estado donde se pide la unidad la cual es medido el residuo, por 
            ejemplo: kg, toneladas, etc.
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState.CostoPrompt">
            -CostoPrompt: Es el estado en donde se pide el costo del residuo.
        </member>
        <member name="F:ClassLibrary.AgregarResiduoHandler.AgregarResiduoState.MonedaPrompt">
            -MonedaPrompt: Es el estado en donde se pide con que moneda se va a cobrar el residuo.
        </member>
        <member name="T:ClassLibrary.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:ClassLibrary.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.#ctor(System.String[],ClassLibrary.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ClassLibrary.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="responder">La respuesta al mensaje procesado.</param>
            <param name="id">Es el id de un usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:ClassLibrary.BaseHandler.CanHandle(System.String)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:ClassLibrary.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Handle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <param name="id">Es el id de un usuario.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.CambiarDatosHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "CambiarDatos".
            </summary>
        </member>
        <member name="P:ClassLibrary.CambiarDatosHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.CambiarDatosHandler.EmpresaUsuario">
            <summary>
            Es el usario de la empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.CambiarDatosHandler.NombreEmpresa">
            <summary>
            Es el nombre de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.CambiarDatosHandler.UbicacionData">
            <summary>
            Es la ubicación de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.CambiarDatosHandler.Contacto">
            <summary>
            Es el contacto de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.CambiarDatosHandler.Empresario">
            <summary>
            Son los empresarios que estan usando los handlers.
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.CambiarDatosHandler.LosEmpresarios">
            <summary>
            Lista de todos los empresarios que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CambiarDatosHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Esta clase procesa el mensaje /cambiardatos.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CambiarDatosHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.CambiarDatosHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.CambiarDatosHandler.CambiarDatosState">
            <summary>
            Indica los diferentes estados que puede tener el comando CambiarDatosState.
            </summary>
        </member>
        <member name="F:ClassLibrary.CambiarDatosHandler.CambiarDatosState.Start">
            -Start: Es el estado inicial del comando. En este estado el comando pide /cambiardatos
        </member>
        <member name="F:ClassLibrary.CambiarDatosHandler.CambiarDatosState.NombrePrompt">
            -NombrePrompt: En este estado el comando pide que coloques el nombre de la empresa a la cual
            quieres cambiar.
        </member>
        <member name="F:ClassLibrary.CambiarDatosHandler.CambiarDatosState.UbicacionPrompt">
            -UbicacionPrompt: En este estado el comando pide que coloques la ubicación por la cual quieres
            cambiar.
        </member>
        <member name="F:ClassLibrary.CambiarDatosHandler.CambiarDatosState.ContactoPrompt">
            -ContactoPrompt: En este estado el comando pide que coloques el contacto por el cual quieres
            cambiar.
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Interfaz para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta interfaz define un atributo para definir el próximo "handler" y una una operación para
            recibir el mensaje y pasarlo al siguiente "handler" en caso que el mensaje no sea procesado. La responsabilidad de
            decidir si el mensaje se procesa o no, y de procesarlo, se realiza en las clases que implementan esta interfaz.
            La interfaz se crea en función del principio de inversión de dependencias, para que los clientes de la cadena de
            responsabilidad, que pueden ser concretos, no dependan de una clase "handler" que potencialmente es abstracta.
            </summary>
        </member>
        <member name="P:ClassLibrary.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <param name="id">Es el id de un usuario.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:ClassLibrary.InvitarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Invitar".
            </summary>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.UbicacionData">
            <summary>
            Pide la ubicación.
            </summary>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.Invitacion">
            <summary>
            Pide la invitación.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.EmpresaData">
            <summary>
            Los datos de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.NombreEmpresa">
            <summary>
            El nombre de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.ContactoData">
            <summary>
            Es el contacto de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.Administrador">
            <summary>
            Son los empresarios que estan usando los handlers.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.InvitarHandler.Result">
            <summary>
            Es el resultado de la publicación.
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.InvitarHandler.LosAdministradores">
            <summary>
            Lista de todos los Administradores que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.InvitarHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Esta clase procesa el mensaje /invitar.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.InvitarHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id de un usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.InvitarHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.InvitarHandler.InvitarState">
            <summary>
            Indica los diferentes estados que puede tener el comando InvitarState.
            </summary>
        </member>
        <member name="F:ClassLibrary.InvitarHandler.InvitarState.Start">
            -Start: Es el estado inicial del comando. 
        </member>
        <member name="F:ClassLibrary.InvitarHandler.InvitarState.NombrePrompt">
            -NombrePrompt: En este estado el comando pide el nombre de la empresa y pasa al siguiente 
            estado.
        </member>
        <member name="F:ClassLibrary.InvitarHandler.InvitarState.UbicacionPrompt">
            -UbicacionPrompt: En este estado el comando pide la ubicación de la empresa y pasa al siguiente
            estado
        </member>
        <member name="F:ClassLibrary.InvitarHandler.InvitarState.ContactoPrompt">
            -ContactoPrompt: En este estado el comando pide el contacto de la empresa y pasa al siguiente
            estado 
        </member>
        <member name="F:ClassLibrary.InvitarHandler.InvitarState.AdministradorPrompt">
            AdministradorPrompt: En este estado el comando envia el contacto del Administrador para asi ponerse
            en contacto. 
        </member>
        <member name="T:ClassLibrary.InvitationGenerator">
            <summary>
            Clase que se encarga de generar invitaciones, si en algun momento debemos cambiar el modo de la invitacion
            entonces solo tendremos que cambiar esta clase y no todas las otras.
            </summary>
        </member>
        <member name="F:ClassLibrary.InvitationGenerator.Random">
            <summary>
            Generamos un randomizer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.InvitationGenerator.Generate">
            <summary>
            Este es un metodo que genera una contraseña que se usa como codigo de invitacion, esta posee menos de
            7 digitos.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.OfertasHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Ofertas".
            </summary>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.UbicacionData">
            <summary>
            Es la ubicación donde se encuentra el producto.
            </summary>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.ResiduoTipo">
            <summary>
            Los tipos de residuos.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.EmpresaUsuario">
            <summary>
            Es el usuario registrado de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.Eleccion">
            <summary>
            La eleccion número de la oferta de la cual quiere obtener el usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.OfertasData">
            <summary>
            Es una lista que almacena las publicaciones que hay.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.PalabraClave">
            <summary>
            La palabra clave la cual quiere el emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.OfertasHandler.LasClaves">
            <summary>
            Es una lista que contiene las palabras claves que se pueden usar.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.BuscarConPalabraClave">
            <summary>
            Property booleana que indica si se quiere o no realizar una busqueda con palabra clave.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.OfertasHandler.Emprendedor">
            <summary>
            Los emprendedores que usan este handler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.OfertasHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Esta clase procesa el mensaje /ofertas.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.OfertasHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id de un usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.OfertasHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.OfertasHandler.OfertasState">
            <summary>
            Indica los diferentes estados que puede tener el comando OfertasState.
            </summary>
        </member>
        <member name="F:ClassLibrary.OfertasHandler.OfertasState.Start">
            -Start: El estado inicial del comando. En este estado el comando pide la dirección de origen 
            y pasa al siguiente estado.
        </member>
        <member name="F:ClassLibrary.OfertasHandler.OfertasState.ClavePrompt">
            -ClavePrompt: En este estado el comando pregunta si el usuario quiere utilizar una palabra clave, mostrandole las 
            palabras clave disponibles y pasa al siguiente estado.
        </member>
        <member name="F:ClassLibrary.OfertasHandler.OfertasState.RespuestaClavePrompt">
            -RespuestaClavePrompt: En este estado el comando le pide al usuario el número de la palabra clave 
             que desea utilizar y pasa al siguiente estado.
        </member>
        <member name="F:ClassLibrary.OfertasHandler.OfertasState.UbicacionPrompt">
            -UbicacionPrompt: Luego de pedir la dirección de origen. En este estado el comando pide la dirección de 
            destino y pasa al siguiente estado.
        </member>
        <member name="F:ClassLibrary.OfertasHandler.OfertasState.ResiduoPrompt">
            -ResiduoPrompt: Luego de pedir la dirección de destino. En este estado el comando calcula la distancia
            y vuelve al estado Start.
        </member>
        <member name="F:ClassLibrary.OfertasHandler.OfertasState.NumeroPrompt">
            -NumeroPrompt: En este estado el comando envia el numero de ese tipo de ofertas que hay.
        </member>
        <member name="T:ClassLibrary.PerfilHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ResiduosPuntuales".
            </summary>
        </member>
        <member name="P:ClassLibrary.PerfilHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.PerfilHandler.EmpresaUsuario">
            <summary>
            El usuario de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PerfilHandler.Emprendedor">
            <summary>
            Los emprendedores que usan este handler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PerfilHandler.PublicacionesUsuario">
            <summary>
            Lista de publicaciones de la empresa
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.PerfilHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Procesa el mensaje /verresiduosconsumidos.
            </summary>
        </member>
        <member name="M:ClassLibrary.PerfilHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.PerfilHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.PerfilHandler.PerfilState">
            <summary>
            Indica los diferentes estados que puede tener el comando PerfilState.
            </summary>
        </member>
        <member name="F:ClassLibrary.PerfilHandler.PerfilState.Start">
            -Start: Es el comando inicial.
        </member>
        <member name="F:ClassLibrary.PerfilHandler.PerfilState.Consumidos">
            -CambiarPrompt: Es el estado en el que te pregunta si quieres o no cambiar o borrar una publicacion.
        </member>
        <member name="T:ClassLibrary.PublicarHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Publicar".
            </summary>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.UbicacionData">
            <summary>
            Es la ubicación.
            </summary>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.ResiduoTipo">
            <summary>
            Son el tipo de residuo publicado.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.ResiduoElegido">
            <summary>
            Es el residuo elegido. 
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.PalabraClave">
            <summary>
            Las palabras claves que hay.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.Result">
            <summary>
            Es el resultado de la publicación.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.EmpresaUsuario">
            <summary>
            Es el usuario de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.HabilitacionData">
            <summary>
            Son los datos de la habilitación.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.Constante">
            <summary>
            Indica si un residuo es generado constantemente.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.ResiduosUsuario">
            <summary>
            Lista de residuos que posee una empresa. 
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.Empresario">
            <summary>
            Son los empresarios que estan usando los handlers.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublicarHandler.LosEmpresarios">
            <summary>
            Lista de los empresarios que usan este handler.
            </summary>
            <value></value>
        </member>
        <member name="F:ClassLibrary.PublicarHandler.LasClaves">
            <summary>
            Es una lista de las palabras clave que se pueden añadir a una publicación.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PublicarHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Esta clase procesa el mensaje /publicar.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PublicarHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.PublicarHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.PublicarHandler.PublicarState">
            <summary>
            Indica los diferentes estados que puede tener el comando PublicarState.
            </summary>
        </member>
        <member name="F:ClassLibrary.PublicarHandler.PublicarState.Start">
            -Start: El estado inicial del comando
        </member>
        <member name="F:ClassLibrary.PublicarHandler.PublicarState.PalabrasClavePrompt">
            -PalabrasClavePrompt:En este comando pide la palabra clave para pasar al siguiente estado.
        </member>
        <member name="F:ClassLibrary.PublicarHandler.PublicarState.HabilitacionPrompt">
            HabilitacionPrompt: En este comando pide la habilitación para pasar al siguiente estado.
        </member>
        <member name="F:ClassLibrary.PublicarHandler.PublicarState.ConstantePrompt">
            ConstantePrompt: En este comando se pide si el residuo es constante o no.
        </member>
        <member name="F:ClassLibrary.PublicarHandler.PublicarState.UbicacionPrompt">
            UbicacionPrompt: En este comando se pide la ubicación donde esta el residuo.
        </member>
        <member name="F:ClassLibrary.PublicarHandler.PublicarState.ResiduoPrompt">
            ResiduoPrompt: En este comando se pide que tipo de residuo es.
        </member>
        <member name="T:ClassLibrary.RegistrarseHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "Registrarse".
            </summary>
        </member>
        <member name="P:ClassLibrary.RegistrarseHandler.Emprendedor">
            <summary>
            Los emprendedores que usan este handler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RegistrarseHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistrarseHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Esta clase procesa el mensaje /registrarse.
            </summary>
        </member>
        <member name="M:ClassLibrary.RegistrarseHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.RegistrarseHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.RegistrarseHandler.RegistrarseState">
            <summary>
            Estados por los que pasara el handler para asi saber que mensaje esperar y que respuesta dar.
            </summary>
        </member>
        <member name="F:ClassLibrary.RegistrarseHandler.RegistrarseState.Start">
            -Start: Es el estadio inicial del comando. En este comando pide el mensaje de invitación para
            asi pasar al siguiente estado.
        </member>
        <member name="F:ClassLibrary.RegistrarseHandler.RegistrarseState.InvitacionPrompt">
            -InvitacionPrompt: Luego de pedir el mensaje de invitación, se hace la logica sobre la invitación
            y se vera si esta es correcta o no.
        </member>
        <member name="T:ClassLibrary.ResiduosConstantesHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ResiduosConstante".
            </summary>
        </member>
        <member name="P:ClassLibrary.ResiduosConstantesHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:ClassLibrary.ResiduosConstantesHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Los datos que va obteniendo el comando en los diferentes estados.
            </summary>
        </member>
        <member name="M:ClassLibrary.ResiduosConstantesHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="id">La id del usuario.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.ResiduosConstantesHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.ResiduosConstantesHandler.ResiduosConstantesState">
            <summary>
            Indica los diferentes estados que puede tener el comando ResiduoConstanteState.
            </summary>
        </member>
        <member name="F:ClassLibrary.ResiduosConstantesHandler.ResiduosConstantesState.Start">
            -Start: El estado inicial del comando.
        </member>
        <member name="T:ClassLibrary.ResiduosPuntualesHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ResiduosPuntuales".
            </summary>
        </member>
        <member name="P:ClassLibrary.ResiduosPuntualesHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="M:ClassLibrary.ResiduosPuntualesHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Procesa el mensaje /residuospuntuales
            </summary>
        </member>
        <member name="M:ClassLibrary.ResiduosPuntualesHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.ResiduosPuntualesHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.ResiduosPuntualesHandler.ResiduosPuntualesState">
            <summary>
            Indica los diferentes estados que puede tener el comando ResiduosPuntualesState
            </summary>
        </member>
        <member name="F:ClassLibrary.ResiduosPuntualesHandler.ResiduosPuntualesState.Start">
            -Start: Es el comando inicial.
        </member>
        <member name="T:ClassLibrary.VerEntregadosHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ResiduosPuntuales".
            </summary>
        </member>
        <member name="P:ClassLibrary.VerEntregadosHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.VerEntregadosHandler.EmpresaUsuario">
            <summary>
            La empresa del usuario
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerEntregadosHandler.LosEmpresarios">
            <summary>
            Lista de los empresarios que hay. 
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerEntregadosHandler.Empresario">
            <summary>
            Son los empresarios que estan usando los handlers.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerEntregadosHandler.PublicacionesUsuario">
            <summary>
            Lista donde se almacenan las publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.VerEntregadosHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Procesa el mensaje /verentregados.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerEntregadosHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.VerEntregadosHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.VerEntregadosHandler.VerEntregadosState">
            <summary>
            Indica los diferentes estados de VerEntregadosState.
            </summary>
        </member>
        <member name="F:ClassLibrary.VerEntregadosHandler.VerEntregadosState.Start">
            -Start: Es el comando inicial.
        </member>
        <member name="F:ClassLibrary.VerEntregadosHandler.VerEntregadosState.Entregados">
            -CambiarPrompt: Es el estado en el que te pregunta si quieres o no cambiar o borrar una publicacion.
        </member>
        <member name="T:ClassLibrary.VerPublicacionesHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ResiduosPuntuales".
            </summary>
        </member>
        <member name="P:ClassLibrary.VerPublicacionesHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.VerPublicacionesHandler.EmpresaUsuario">
            <summary>
            La empresa del usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerPublicacionesHandler.Elegido">
            <summary>
            Elegido es el número de la publicación que se eligio como entregada.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerPublicacionesHandler.PublicacionesUsuario">
            <summary>
            Lista de las publicaciones que hay.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerPublicacionesHandler.LosEmpresarios">
            <summary>
            Lista de los empresarios que hay.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerPublicacionesHandler.Empresario">
            <summary>
            Son los empresarios que estan usando los handlers.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.VerPublicacionesHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Procesa el mensaje /verpublicaciones.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerPublicacionesHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.VerPublicacionesHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.VerPublicacionesHandler.VerPublicacionesState">
            <summary>
            Indica los diferentes estados que puede tener el comando VerPublicacionesState.
            </summary>
        </member>
        <member name="F:ClassLibrary.VerPublicacionesHandler.VerPublicacionesState.Start">
            -Start: Es el comando inicial.
        </member>
        <member name="F:ClassLibrary.VerPublicacionesHandler.VerPublicacionesState.CambiarPrompt">
            -CambiarPrompt: Es el estado en el que te pregunta si quieres o no cambiar o borrar una publicacion.
        </member>
        <member name="F:ClassLibrary.VerPublicacionesHandler.VerPublicacionesState.EntregadoUsuario">
            -Entregado: Es el estado en el que se indica a la publicacion como entregada.
        </member>
        <member name="F:ClassLibrary.VerPublicacionesHandler.VerPublicacionesState.Entregado">
            -Entregado: Es el ultimo state en el cual se cambia el estado de la publicación entregada y 
            se le asocia un usuario destinatario.
        </member>
        <member name="F:ClassLibrary.VerPublicacionesHandler.VerPublicacionesState.Eliminar">
            -Eliminar: Es el estado en el que se borra una publicacion.
        </member>
        <member name="T:ClassLibrary.VerResiduosConsumidosHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "ResiduosPuntuales".
            </summary>
        </member>
        <member name="P:ClassLibrary.VerResiduosConsumidosHandler.State">
            <summary>
            El estado del comando.
            </summary>
        </member>
        <member name="P:ClassLibrary.VerResiduosConsumidosHandler.EmpresaUsuario">
            <summary>
            El usuario de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerResiduosConsumidosHandler.Emprendedor">
            <summary>
            Los emprendedores que usan este handler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.VerResiduosConsumidosHandler.PublicacionesUsuario">
            <summary>
            Lista de publicaciones de la empresa
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.VerResiduosConsumidosHandler.#ctor(ClassLibrary.BaseHandler)">
            <summary>
            Procesa el mensaje /verresiduosconsumidos.
            </summary>
        </member>
        <member name="M:ClassLibrary.VerResiduosConsumidosHandler.InternalHandle(System.String,System.Int32,System.String@)">
            <summary>
            Procesa todos los mensajes y retorna true siempre.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado indicando que el mensaje no pudo se procesado.</param>
            <param name="id">Es el id del usuario.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:ClassLibrary.VerResiduosConsumidosHandler.InternalCancel">
            <summary>
            Retorna este "handler" al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.VerResiduosConsumidosHandler.VerResiduosConsumidosState">
            <summary>
            Indica los diferentes estados que puede tener el comando VerResiduosConsumidosState.
            </summary>
        </member>
        <member name="F:ClassLibrary.VerResiduosConsumidosHandler.VerResiduosConsumidosState.Start">
            -Start: Es el comando inicial.
        </member>
        <member name="F:ClassLibrary.VerResiduosConsumidosHandler.VerResiduosConsumidosState.Consumidos">
            -CambiarPrompt: Es el estado en el que te pregunta si quieres o no cambiar o borrar una publicacion.
        </member>
        <member name="T:ClassLibrary.IEmpresarioPublicaciones">
            <summary>
            IEmpresarioPublicaciones es una interfaz para aplicar DIP, en buscador hay un metodo que precisa
            saber esta informacion, pero es mas correcto pasar esta interfaz en vez de un Empresario ya que
            de esta forma no solo la clase Empresario esta mas encapsulada, sino que ademas podemos agregar
            nuevas responsabilidades a Empresario sin que deba cambiar el programa.
            </summary>
        </member>
        <member name="P:ClassLibrary.IEmpresarioPublicaciones.LasPublicaciones">
            <summary>
            Lista donde se almacenan las publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en y deserializados desde texto en formato
            Json.
            </summary>
        </member>
        <member name="M:ClassLibrary.IJsonConvertible.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.IUsuario">
            <summary>
            IUsuario es una interfaz, todos los usuarios (ya sean emprendedores, empresarios o administradores)
            implementan esta interfaz.
            </summary>
        </member>
        <member name="P:ClassLibrary.IUsuario.Id">
            <summary>
            El unico valor que comparte todo usuario es un valor id que es un int.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IUsuario.State">
            <summary>
            El estado del comando.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.ListaAdministradores">
            <summary>
            ListaAdministradores es el experto en conocer a los administradores, y 
            por el patron Expert este tambien es quien
            posee la responsabilidad de agregar administradores y/o removerlos.
            </summary>
        </member>
        <member name="P:ClassLibrary.ListaAdministradores.Administradores">
            <summary>
            Variable estatica administrador, porque es una lista de instancias de administrador
            que lleva un registro de todos los administradores que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaAdministradores.AddAdministrador(ClassLibrary.Administrador)">
            <summary>
            Metodo que agrega un administrador a la lista de administradores, desginado a esta clase por Expert.
            </summary>
            <param name="administrador"></param>
        </member>
        <member name="M:ClassLibrary.ListaAdministradores.RemoveAdministrador(ClassLibrary.Administrador)">
            <summary>
            Metodo que remove un administrador a la lista de administradores, desginado a esta clase por Expert.
            </summary>
            <param name="administrador"></param>
        </member>
        <member name="M:ClassLibrary.ListaAdministradores.#ctor">
            <summary>
            Constructor para sumarle instancias a la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaAdministradores.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaAdministradores.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si _instance es nula y si no es nula te devuelve el 
            valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaAdministradores.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase ListaAdministradores los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.ListaEmpresarios">
            <summary>
            ListaEmpresarios es el experto en conocer a los empresarios, y 
            por el patron Expert este tambien es quien
            posee la responsabilidad de agregar Empresarios y/o remover Empresarios.
            </summary>
        </member>
        <member name="P:ClassLibrary.ListaEmpresarios.Empresarios">
            <summary>
            Variable estatica empresarios, porque es una lista de instancias de Empresario
            que lleva un registro de todos los empresarios que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaEmpresarios.AddEmpresario(ClassLibrary.Empresario)">
            <summary>
            Metodo que agrega un empresario a la lista de empresarios, desginado a esta clase por Expert.
            </summary>
            <param name="empresario"></param>
        </member>
        <member name="M:ClassLibrary.ListaEmpresarios.#ctor">
            <summary>
            Constructor vacio para sumarle instancias en la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaEmpresarios.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaEmpresarios.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase ListaEmpresarios los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:ClassLibrary.ListaEmpresarios.RemoveEmpresario(ClassLibrary.Empresario)">
            <summary>
            Metodo que remove un empresario a la lista de empresarios, desginado a esta clase por Expert.
            </summary>
            <param name="empresario"></param>
        </member>
        <member name="M:ClassLibrary.ListaEmpresarios.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si empresarios es nula y si no es nula te devuelve el 
            valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ListaEmpresas">
            <summary>
            ListaEmpresas es el experto en conocer a las empresas, y 
            por el patron Expert este tambien es quien
            posee la responsabilidad de agregar Empresas y/o remover Empresas.
            </summary>
        </member>
        <member name="P:ClassLibrary.ListaEmpresas.Empresas">
            <summary>
            Variable estatica empresas, porque es una lista de instancias de Empresa
            que lleva un registro de todos las empresas que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaEmpresas.AddEmpresa(ClassLibrary.Empresa)">
            <summary>
            AddEmpresa es un metodo que se encarga de agregar una empresa a la lista, 
            desginado  a esta clase por Expert.
            </summary>
            <param name="empresa"></param>
        </member>
        <member name="M:ClassLibrary.ListaEmpresas.RemoveEmpresa(ClassLibrary.Empresa)">
            <summary>
            RemoveEmpresa es un metodo que se encarga de eliminar una empresa de la lista.
            </summary>
            <param name="empresa"></param>
        </member>
        <member name="M:ClassLibrary.ListaEmpresas.#ctor">
            <summary>
            Constructor para sumarle instancia a la clasica.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaEmpresas.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaEmpresas.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si ListaEmpresas es nula y si no es nula te devuelve el 
            valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ListaEntregadas">
            <summary>
            Lista entregadas es un structurer que posee dos metodos AddPublicacion y removePublicacion
            para añadir o remover elementos de una property de la clase llamada ListaPublicaciones, es el encargado
            de llevar a cabo dichas tareas porque es el experto en conocer los residuos.
            </summary>
        </member>
        <member name="P:ClassLibrary.ListaEntregadas.ListaPublicaciones">
            <summary>
            Property publicación, es una lista de instancias de Publicacion
            que lleva el registro de las publicaciones de una empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaEntregadas.AddPublicacion(ClassLibrary.Publicacion)">
            <summary>
            AddPublicacion es un metodo que se encarga de agregar publicaciones a la lista
            </summary>
            <param name="publicacion"></param>
        </member>
        <member name="M:ClassLibrary.ListaEntregadas.RemovePublicacion(ClassLibrary.Publicacion)">
            <summary>
            RemovePublicacion es un metodo que se encarga de eliminar publicaciones de la lista.
            </summary>
            <param name="publicacion"></param>
        </member>
        <member name="M:ClassLibrary.ListaEntregadas.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si ListaEntregadas es nula y si no es nula te 
            devuelve el valor de la property.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaEntregadas.#ctor">
            <summary>
            Constructor vacio para agregarle instancias a ListaPublicaciones.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaEntregadas.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaEntregadas.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase ListaEmpresarios los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.ListaInvitaciones">
            <summary>
            ListaInvitaciones es una clase que contiene invitaciones que posee dos metodos AddInvitacion y 
            RemoveInvitacion para añadir o remover invitaciones de una property de la clase llamada ListaInvitaciones, es el encargado
            de llevar a cabo dichas tareas porque es el experto en conocer las invitaciones. ListaInvitaciones tambien usa creator, ya que contiene
            instancias de invitacion y no tiene sentido que halla una invitacion fuera de su property invitaciones.
            </summary>
        </member>
        <member name="F:ClassLibrary.ListaInvitaciones.Invitaciones">
            <summary>
            Property string invitaciones, es una lista de instancias de invitaciones
            que lleva el registro de las invitaciones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaInvitaciones.AddInvitacion">
            <summary>
            AddInvitacion es un metodo que se encarga de agregar invitaciones a la lista. Ademas por creator crea una invitacion.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaInvitaciones.RemoveInvitacion(System.String)">
            <summary>
            RemoveInvitacion es un metodo que se encarga de eliminar invitaciones de la lista.
            </summary>
            <param name="invitacion"></param>
        </member>
        <member name="M:ClassLibrary.ListaInvitaciones.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si ListaInvitaciones es nula y si no es nula te 
            devuelve el valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaInvitaciones.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaInvitaciones.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase ListaInvitaciones los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.ListaPalabrasClave">
            <summary>
            ListaPalabrasClave es una clase que contiene palabras clave que posee dos metodos AddPalabra y 
            RemovePalabra para añadir o remover elementos de una property de la clase llamada ListaPalabrasClave, es el encargado
            de llevar a cabo dichas tareas porque es el experto en conocer las palabras claves.
            </summary>
        </member>
        <member name="F:ClassLibrary.ListaPalabrasClave.Palabras">
            <summary>
            Property string palabras, es una lista de instancias de palabras clave
            que lleva el registro de las palabras clave.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaPalabrasClave.AddPalabra(System.String)">
            <summary>
            AddPalabra es un metodo que se encarga de agregar palabras a la lista.
            </summary>
            <param name="palabra"></param>
        </member>
        <member name="M:ClassLibrary.ListaPalabrasClave.RemovePalabra(System.String)">
            <summary>
            RemovePalabra es un metodo que se encarga de eliminar palabras de la lista.
            </summary>
            <param name="palabra"></param>
        </member>
        <member name="M:ClassLibrary.ListaPalabrasClave.GetInstance">
            <summary>
            ListaPalabrasClaves es una lista que se encarga de almacenar ciertas palabras para asi
            el empresario puede colocarlas en su publicación y el emprendedor de esta manera lograria
            una elección mas facil.
            </summary>
        </member>
        <member name="T:ClassLibrary.ListaPublicaciones">
            <summary>
            Lista publicaciones es un structurer de publicación que posee dos metodos AddPublicacion y removePublicacion
            para añadir o remover elementos de una property de la clase llamada ListaPublicaciones, es el encargado
            de llevar a cabo dichas tareas porque es el experto en conocer los residuos.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaPublicaciones.#ctor">
            <summary>
            Constructor de la clase ListaPublicaciones vacio intencionalmente.
            </summary>
        </member>
        <member name="F:ClassLibrary.ListaPublicaciones.Publicaciones">
            <summary>
            Property publicación, es una lista de instancias de Publicacion
            que lleva el registro de las publicaciones de una empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaPublicaciones.AddPublicacion(ClassLibrary.Publicacion)">
            <summary>
            AddPublicacion es un metodo que se encarga de agregar publicaciones a la lista
            </summary>
            <param name="publicacion"></param>
        </member>
        <member name="M:ClassLibrary.ListaPublicaciones.RemovePublicacion(ClassLibrary.Publicacion)">
            <summary>
            RemovePublicacion es un metodo que se encarga de eliminar publicaciones de la lista.
            </summary>
            <param name="publicacion"></param>
        </member>
        <member name="M:ClassLibrary.ListaPublicaciones.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaPublicaciones.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase ListaEmpresarios los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.ListaResiduos">
            <summary>
            Lista residuos es un structurer de residuo que posee dos metodos AddResiduo y removeresiduo
            para añadir o remover elementos de una property de la clase llamada ListaResiduo, es el encargado
            de llevar a cabo dichas tareas porque es el experto en conocer los residuos.
            </summary>
        </member>
        <member name="F:ClassLibrary.ListaResiduos.Residuos">
            <summary>
            Property residuo, es una lista de instancias de Residuo
            que lleva el registro de los residuos de una empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaResiduos.AddResiduo(ClassLibrary.Residuo)">
            <summary>
            AddResiduo es un metodo que se encarga de agregar residuos a la lista.
            </summary>
            <param name="residuo"></param>
        </member>
        <member name="M:ClassLibrary.ListaResiduos.RemoveResiduo(ClassLibrary.Residuo)">
            <summary>
            RemoveResiduo es un metodo que se encarga de eliminar residuos de la lista.
            </summary>
            <param name="residuo"></param>
        </member>
        <member name="M:ClassLibrary.ListaResiduos.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ListaUsuarios">
            <summary>
            ListaUsuarios es el experto en conocer a todos los Usuario, y 
            por el patron Expert este tambien es quien
            posee la responsabilidad de agregar y/o remover Usuario.
            A su vez depende de IUsuario para agregar cualquier tipo de usuario (emprendedor,
            administrador o Usuario).
            </summary>
        </member>
        <member name="P:ClassLibrary.ListaUsuarios.Usuarios">
            <summary>
            Variable estatica Usuario, porque es una lista de instancias de Usuario
            que lleva un registro de todos las Usuario que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaUsuarios.AddUsuario(ClassLibrary.Emprendedor)">
            <summary>
            AddUsuario es el encargado de agregar Usuario a la lista.
            </summary>
            <param name="usuario"></param>
        </member>
        <member name="M:ClassLibrary.ListaUsuarios.RemoveUsuario(ClassLibrary.Emprendedor)">
            <summary>
            RemoveUsuario es el encargado de remover Usuario de la lista.
            </summary>
            <param name="usuario"></param>
        </member>
        <member name="M:ClassLibrary.ListaUsuarios.#ctor">
            <summary>
            Constructor vacio para agregarle instancias a la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.ListaUsuarios.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ListaUsuarios.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase ListaInvitaciones los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:ClassLibrary.ListaUsuarios.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si la property ListaUsuarios es nula y si no es nula te devuelve el 
            valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Mercado">
            <summary>
            La clase mercado es estatica porque el esta conoce todas las publicaciones
            existentes, independientemente de a que empresa pertenezcan. Como esta es
            la experta en la informacion de todas las publicaciones tambien es la
            encargada a través de sus 2 metodo Add y Remove Mercado de agregar o remover publicaciones.
            </summary>
        </member>
        <member name="P:ClassLibrary.Mercado.Ofertas">
            <summary>
            Property oferta, es una lista que contiene publicaciones.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Mercado.AddMercado(ClassLibrary.Publicacion)">
            <summary>
            AddMercado, metodo para agregar publicaciones al mercado, designado por Expert.
            </summary>
            <param name="publicacion"></param>
        </member>
        <member name="M:ClassLibrary.Mercado.RemoveMercado(ClassLibrary.Publicacion)">
            <summary>
            RemoveMercado, metodo para remover publicaciones al mercado, designado por Expert.
            </summary>
            <param name="publicacion"></param>
        </member>
        <member name="M:ClassLibrary.Mercado.#ctor">
            <summary>
            Constructor vacio para agregarle instancias a la clase.
            </summary>
        </member>
        <member name="M:ClassLibrary.Mercado.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Mercado.LoadFromJson(System.String)">
            <summary>
            Sirve para deserializar un string de json para asi 
            asignarle una nueva clase Mercado los valores 
            previos a ponerle un stop al program para asi mantener la información.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:ClassLibrary.Mercado.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si mercado es nula y si no es nula te devuelve el 
            valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.PosiblesResiduos">
            <summary>
            PosiblesResiduos es el experto en conocer a las Residuos, y 
            por el patron Expert este tambien es quien
            posee la responsabilidad de agregar Residuos y/o remover Residuos.
            </summary>
        </member>
        <member name="P:ClassLibrary.PosiblesResiduos.Residuos">
            <summary>
            Variable estatica Residuos, porque es una lista de instancias de Empresa
            que lleva un registro de todos las Residuos que hay.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.PosiblesResiduos.AddResiduo(System.String)">
            <summary>
            AddEmpresa es un metodo que se encarga de agregar una empresa a la lista, 
            desginado  a esta clase por Expert.
            </summary>
            <param name="residuo"></param>
        </member>
        <member name="M:ClassLibrary.PosiblesResiduos.RemoveResiduo(System.String)">
            <summary>
            RemoveEmpresa es un metodo que se encarga de eliminar una empresa de la lista.
            </summary>
            <param name="residuo"></param>
        </member>
        <member name="M:ClassLibrary.PosiblesResiduos.#ctor">
            <summary>
            Constructor vacio para sumarle instancia a la clasica.
            </summary>
        </member>
        <member name="M:ClassLibrary.PosiblesResiduos.GetInstance">
            <summary>
            Sirve para aplicar el singleton, verifica si Residuos es nula y si no es nula te devuelve el 
            valor de la property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Publicacion">
            <summary>
            Publicación es una clase que conoce la información de empresa, residuo, la fecha
            y ubicación de una publicación hecha por una X empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.Publicacion.#ctor">
            <summary>
            Constructor de Publicacion.
            </summary>
        </member>
        <member name="P:ClassLibrary.Publicacion.Empresa">
            <summary>
            Property empresa, es la empresa que crea la publicación.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.Habilitacion">
            <summary>
            Property habilitación, es la habilitación que se le pide a la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.Residuo">
            <summary>
            Property residuo, es el residuo que se esta ofertando en la publicación.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.Ubicacion">
            <summary>
            Property ubicación, es la ubicación de donde se encuentran los residuos de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.Constante">
            <summary>
            Property constante, indica si un residuo es constante o no.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.PalabraClave">
            <summary>
            Property palabraClave, es una palabra clave que pudo haber sido agregada por un empresario al crear la publicacion.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.Fecha">
            <summary>
            Fecha en la que fue creada la publicacion.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.Entregado">
            <summary>
            Property que indica si los residuos de una publicacion ya fueron o no entregados.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Publicacion.IdEntregado">
            <summary>
            Property idEntregado es el id de la persona que se le entrego el residuo de una publicación.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Publicacion.#ctor(ClassLibrary.Residuo,ClassLibrary.Ubicacion,ClassLibrary.Empresa,System.String,System.Boolean)">
            <summary>
            Constructor de una instancia de Publicacion.
            </summary>
        </member>
        <member name="M:ClassLibrary.Publicacion.AgregarPalabraClave(System.String)">
            <summary>
            Método que se encarga de agregar palabras clave a la publicación
            </summary>
            <param name="PalabraClave"></param>
        </member>
        <member name="M:ClassLibrary.Publicacion.AgregarUsuarioEntregado(System.Int32)">
            <summary>
            Metodo para agregar el id del usuario al que se le entrego el residuo.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Publicacion.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.MyReferenceHandler.Instance">
            <summary>
            Sirve para aplicar el singleton, verifica si instance es nula y si no es nula te 
            devuelve el valor de la property.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.Registrado">
            <summary>
            Usamos la clase registrado estatica ya que no necesitamos crear instancias de este objeto para 
            usarla como una herramienta.
            </summary>
        </member>
        <member name="M:ClassLibrary.Registrado.VerifyEmpresario(System.Int32)">
            <summary>
            Esta clase se encarga de identificar si el usuario esta registrado o no.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Registrado.VerifyUser(System.Int32)">
            <summary>
            Verifica que el usuario este registrado.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Residuo">
            <summary>
            Residuo es una clase que conoce la informacion de los residuos publicados, el tipo y la cantidad
            de una publicacion hecha por una X empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Residuo.Tipo">
            <summary>
            Es el encargado de conocer el tipo de material que se esta ofreciendo.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Residuo.Cantidad">
            <summary>
            Es el encargado de conocer la cantidad que hay de cada material.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Residuo.Unidad">
            <summary>
            Es el encargado de conocer la unidad de la cual se esta haciendo referencia, por ejemplo 
            (kg, toneladas, etc).
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Residuo.Cost">
            <summary>
            Es el encargado de conocer el costo del residuo.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Residuo.Moneda">
            <summary>
            Es el encargado de conocer la moneda con la cual se va a hacer el medio de pago, por ejemplo
            (pesos uruguayos, dolares, euros, etc.)
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Residuo.#ctor(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Constructor de una instancia de Residuo.
            </summary>
            <param name="tipo"></param>
            <param name="cantidad"></param>
            <param name="unidad"></param>
            <param name="cost"></param>
            <param name="moneda"></param>
        </member>
        <member name="M:ClassLibrary.Residuo.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Serializer">
            <summary>
            ListaEmpresas es el experto en conocer a las empresas, y 
            por el patron Expert este tambien es quien
            posee la responsabilidad de agregar Empresas y/o remover Empresas.
            </summary>
        </member>
        <member name="M:ClassLibrary.Serializer.#ctor">
            <summary>
            Constructor para sumarle instancia a la clasica.
            </summary>
        </member>
        <member name="M:ClassLibrary.Serializer.ConvertToJson">
            <summary>
            Sirve para serializar la clase y todas sus property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Ubicacion">
            <summary>
            Clase Ubicacion, esta es experta en conocer la ubicacion.
            </summary>
        </member>
        <member name="P:ClassLibrary.Ubicacion.Location">
            <summary>
            Property location, es el locación donde se encuentra la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Ubicacion.Direccion">
            <summary>
            Property dirección, es la diracción donde se encuentra la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Ubicacion.client">
            <summary>
            Property LocationApiClient, es la encargada de conocer la localizacion del cliente.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Ubicacion.#ctor(System.String)">
            <summary>
            Constructor de instancia ubicación. 
            </summary>
            <param name="direccion"></param>
        </member>
        <member name="M:ClassLibrary.Ubicacion.CalculateLocation">
            <summary>
            Sirve para calcular la localización de la dirección de una instancia de ubicación.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Ubicacion.ConvertToJson">
            <summary>
            Metodo que convierte una clase en string Json (serializa).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Library.Listas">
            <summary>
            Constructor de Listas
            </summary>
        </member>
        <member name="P:Library.Listas.Instance">
            <summary>
            Sirve para aplicar el singleton, verifica si instance es nula y si no es nula te 
            devuelve el valor de la property.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
